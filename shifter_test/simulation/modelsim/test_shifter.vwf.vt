// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2022 18:54:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_10M;
reg DE;
reg ENC_360;
reg ENC_ABS_HOME;
reg [15:0] treg_SDRAM_DQ;
reg TESTCLK2;
reg VSYNC;
reg nReset;
// wires                                               
wire GSCLK;
wire LAT;
wire SCLK;
wire SDO_11_3;
wire SDO_11_2;
wire SDO_11_1;
wire SDO_11_0;
wire SDO_10_3;
wire SDO_10_2;
wire SDO_10_1;
wire SDO_10_0;
wire SDO_9_3;
wire SDO_9_2;
wire SDO_9_1;
wire SDO_9_0;
wire SDO_8_3;
wire SDO_8_2;
wire SDO_8_1;
wire SDO_8_0;
wire SDO_7_3;
wire SDO_7_2;
wire SDO_7_1;
wire SDO_7_0;
wire SDO_6_3;
wire SDO_6_2;
wire SDO_6_1;
wire SDO_6_0;
wire SDO_5_3;
wire SDO_5_2;
wire SDO_5_1;
wire SDO_5_0;
wire SDO_4_3;
wire SDO_4_2;
wire SDO_4_1;
wire SDO_4_0;
wire SDO_3_3;
wire SDO_3_2;
wire SDO_3_1;
wire SDO_3_0;
wire SDO_2_3;
wire SDO_2_2;
wire SDO_2_1;
wire SDO_2_0;
wire SDO_1_3;
wire SDO_1_2;
wire SDO_1_1;
wire SDO_1_0;
wire SDO_0_3;
wire SDO_0_2;
wire SDO_0_1;
wire SDO_0_0;
wire [12:0] SDRAM_ADDR;
wire [1:0] SDRAM_BA;
wire SDRAM_CAS_N;
wire SDRAM_CKE;
wire SDRAM_CLK;
wire SDRAM_CS_N;
wire [15:0] SDRAM_DQ;
wire [1:0] SDRAM_DQM;
wire SDRAM_RAS_N;
wire SDRAM_WE_N;
wire [3:0] STATE_CHECK;
wire TESTCLK;

// assign statements (if any)                          
assign SDRAM_DQ = treg_SDRAM_DQ;
top i1 (
// port map - connection between master ports and signals/registers   
	.CLK_10M(CLK_10M),
	.DE(DE),
	.ENC_360(ENC_360),
	.ENC_ABS_HOME(ENC_ABS_HOME),
	.GSCLK(GSCLK),
	.LAT(LAT),
	.SCLK(SCLK),
	.SDRAM_ADDR(SDRAM_ADDR),
	.SDRAM_BA(SDRAM_BA),
	.SDRAM_CAS_N(SDRAM_CAS_N),
	.SDRAM_CKE(SDRAM_CKE),
	.SDRAM_CLK(SDRAM_CLK),
	.SDRAM_CS_N(SDRAM_CS_N),
	.SDRAM_DQ(SDRAM_DQ),
	.SDRAM_DQM(SDRAM_DQM),
	.SDRAM_RAS_N(SDRAM_RAS_N),
	.SDRAM_WE_N(SDRAM_WE_N),
	.STATE_CHECK(STATE_CHECK),
	.TESTCLK(TESTCLK),
	.TESTCLK2(TESTCLK2),
	.VSYNC(VSYNC),
	.nReset(nReset)
);
initial 
begin 
#100000000 $stop;
end 

// TESTCLK2
always
begin
	TESTCLK2 = 1'b0;
	TESTCLK2 = #5000 1'b1;
	#5000;
end 
endmodule

